name: CMake C/C++ CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [ linux-gcc,linux-clang,linux-gcc8,linux-gcc10,linux-gcc-ubsan,linux-gcc-asan,linux-gcc-32,linux-gcc-x32,linux-clang11,linux-clang12,macos-clang,windows-msvc,windows-msvc-32,windows-clang,windows-clang-32 ]
        build_type: [Debug]
        include:
          - compiler: linux-gcc
            os: ubuntu-latest

          - compiler: linux-clang
            os: ubuntu-latest
            cmake_opts: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

          - compiler: linux-gcc8
            os: ubuntu-18.04
            preconfigure: sudo apt-get update && sudo apt-get install -y gcc-8 g++-8
            cmake_opts: -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8

          - compiler: linux-gcc10
            os: ubuntu-20.04
            preconfigure: sudo apt-get update && sudo apt-get install -y gcc-10 g++-10
            cmake_opts: -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10

          - compiler: linux-gcc-ubsan
            os: ubuntu-latest
            cflags: -fsanitize=undefined

          - compiler: linux-gcc-asan
            os: ubuntu-latest
            cflags: -fsanitize=address -fsanitize-address-use-after-scope

          - compiler: linux-gcc-32
            os: ubuntu-latest
            preconfigure: sudo apt-get update && sudo apt-get install gcc-multilib g++-multilib
            cflags: -m32

          - compiler: linux-gcc-x32
            os: ubuntu-latest
            preconfigure: sudo apt-get update && sudo apt-get install gcc-multilib g++-multilib
            cflags: -mx32

          - compiler: linux-clang11
            os: ubuntu-20.04
            preconfigure: sudo apt-get update && sudo apt-get install -y clang-11 libc++-11-dev libc++abi-11-dev
            cmake_opts: -DCMAKE_C_COMPILER=clang-11 -DCMAKE_CXX_COMPILER=clang++-11
            cflags: -stdlib=libc++

          - compiler: linux-clang12
            os: ubuntu-20.04
            preconfigure: sudo apt-get update && sudo apt-get install -y clang-12 libc++-12-dev libc++abi-12-dev
            cmake_opts: -DCMAKE_C_COMPILER=clang-12 -DCMAKE_CXX_COMPILER=clang++-12
            cflags: -stdlib=libc++

          - compiler: macos-clang
            os: macos-latest

          - compiler: windows-msvc
            os: windows-latest

          - compiler: windows-msvc-32
            os: windows-latest
            cmake_opts: -A Win32

          - compiler: windows-clang
            os: windows-latest
            cmake_opts: -T ClangCL

          - compiler: windows-clang-32
            os: windows-latest
            cmake_opts: -T ClangCL -A Win32
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: preconfigure
      run: ${{ matrix.preconfigure }}
    - name: configure
      run: cmake -S . -B build_dir -Wdev -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_FLAGS="${{ matrix.cflags }}" -DCMAKE_CXX_FLAGS="${{ matrix.cflags }}" -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.cflags }}" ${{ matrix.cmake_opts }}
    - name: build
      run: cmake --build build_dir --verbose --config ${{ matrix.build_type }}
    - name: test
      run: ctest --extra-verbose --build-config ${{ matrix.build_type }}
      working-directory: build_dir
      env:
        # extra options for address sanitizer
        ASAN_OPTIONS: strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
    - name: install
      run: cmake --install build_dir --prefix install_prefix --config ${{ matrix.build_type }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.compiler }}
        path: install_prefix

  build_mingw:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [windows-gcc]
        build_type: [Debug]
        include:
          - compiler: windows-gcc
            os: windows-2019
            cmake_opts: -G "Ninja" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: git cmake ninja mingw-w64-x86_64-toolchain mingw-w64-x86_64-dlfcn
    - name: preconfigure
      run: ${{ matrix.preconfigure }}
    - name: configure
      run: cmake -S . -B build_dir -Wdev -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_FLAGS="${{ matrix.cflags }}" -DCMAKE_CXX_FLAGS="${{ matrix.cflags }}" -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.cflags }}" ${{ matrix.cmake_opts }}
    - name: build
      run: cmake --build build_dir --verbose
    - name: test
      run: ctest --extra-verbose
      working-directory: build_dir
      env:
        # extra options for address sanitizer
        ASAN_OPTIONS: strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
    - name: install
      run: cmake --install build_dir --prefix install_prefix
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.compiler }}-${{ matrix.build_type }}
        path: install_prefix
